load(7,1);
load(8,2);

load(9,3);
load(10,4);

load (11, 5);
load (12, 6);

load (13, 7);
load (14, 8);

load (15, 9);
load (16, 10);

load (17, 11);
load (18, 12);

load (19, 13);
load (20, 14);

load (21, 15);
load (22, 16);

load(23,17);
load(24,18);

[READY_LIST + 0] = 0; 

// load(25,21);
// load(26,22);
// load(27,23);

PTBR = 1024;
PTLR=4;

[PTBR + 0] = 21; // Physical Page Number for Logical Page 0
[PTBR + 1] = "00"; // Auxiliary Information for Logical Page 0
[PTBR + 2] = 22; // Physical Page Number for Logical Page 1 
[PTBR + 3] = "00"; // Auxiliary Information for Logical Page 0
[PTBR + 4] = 23; // Physical Page Number for Logical Page 2
[PTBR + 5] = "00"; // Auxiliary Information for Logical Page 0	
[PTBR + 6] = 28; // Physical Page Number for Logical Page 3 (Stack) 
[PTBR + 7] = "01"; // Auxiliary Information for Logical Page 3 (Stack)

//[READY_LIST + 1] = 2;

SP = 3 * 512;
[28 * 512] = 0;

load(5,19);
load(6,20);




alias counter S0;			
counter = 0;
while ( counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;





counter=0;

while(counter<16) do
  [READY_LIST+15+counter]=-1;
  [READY_LIST+16+counter]=-1; 
  counter=counter+2;
endwhile; 





alias i S2;
i=0;
while(i<25) do
	[1280+i]=1;
	i=i+1;
endwhile;

while(i<64) do
	[1280+i]=0;
	i=i+1;
endwhile;

[1280+28]=1;





i=0;
while(i<32) do
	[1536+32*i+1]=0;
	i=i+1;
endwhile;

[READY_LIST + 31] = 0;
[READY_LIST + 1] = 2;



i=448;
while(i<512) do
	[DISK_LIST + i]=0;
	i=i+1;
endwhile;


	
store(6,20);

ireturn;