alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP/512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

if (sysCallNo == 9) then	//sysCallNo 9 --> EXEC
	alias fileName S2;
	fileName = [physicalSP - 3];	//Only argument is fileName
	
	alias counter S3;
	counter = 0;
	
	while (counter < 64) do
		if ([FAT + (8 * counter)] == fileName) then		//see if file exists in the disk
			
			alias basicBlock S4;
			basicBlock = [FAT + (8 * counter) + 2];
			
			load (1, basicBlock);	//load the basicBlock to get info about the codeBlocks of the process
			
			alias i S5;
			i = 0;

			counter = 0;
			while (counter < 6) do
				if ([PTBR + counter + 1] == "01" || [PTBR + counter + 1] == "11") then	//if the entry is valid decrement the number in the MEM_LIST to show that this process is no longer using this page
					
					[MEM_LIST + [PTBR + counter]] = [MEM_LIST + [PTBR + counter]] - 1;
				endif;

				if ([PTBR + counter] >= 448) then	//if page is in swap area decrement there
					[DISK_LIST + [PTBR + counter]] = [DISK_LIST + [PTBR + counter]] - 1;
				
				endif;

				[PTBR + counter] = [SCRATCHPAD + counter/2];	//put the block in disk for page table (pure demand)
				[PTBR + counter + 1] = "00";

				i = i + 1;
				counter = counter + 2;
			endwhile;
			
			store (6, 20); 	//DON'T FORGET THIS

			[PTBR + 7] = "01";	//use the same stack, set aux info as unreferenced and valid			
			
			alias PCB S10;
			alias SWOFT S11;
			PCB = READY_LIST + ((PTBR - 1024)/8) * 32;
			
			counter = 0;
			while (counter < 16) do
				if ([PCB + 15 + counter] != -1) then	//close all files opened by the process to be replaced
					
					SWOFT = [PCB + 15 + counter];
					
					[SWOFT + 1] = [SWOFT + 1] - 1;		//decrement File Open Count
					
					if ([SWOFT + 1] == 0) then
						[SWOFT] = -1;	//if File Open Count becomes 0 then invalidate the entry by setting FAT 										 Index entry to -1
					endif;
	
					[PCB + 15 + counter] = -1;	//now invalidate the entry in per process open file table in PCB
					
					[PCB + 15 + counter + 1] = -1;	//set LSEEK Position to -1 (invalid)
				
				endif;
				
				counter = counter + 2;
			endwhile;
			
			SP = 3 * 512;	//+1 stack, ireturn decrements this and assigns value on top to IP
			
			[([PTBR + 2 * (SP/512)] * 512) + (SP % 512)] = 0;	//IP should be set to 0 at the beginning
			
			ireturn;	//NO return value for EXEC
			
		endif;
	
		counter = counter + 1;
	endwhile;

	[physicalSP - 2] = -1;	//if no file with fileName exists --> failure
	ireturn;		
	
endif;		
			



if (sysCallNo == 11) then	//sysCallNo 11 --> GETPID
	[physicalSP - 2] = (PTBR-1024)/8;	//just put the PID as the return value
	ireturn;

	[physicalSP -2] = -1;	//in case of failure --> return -1  ..?
	ireturn;
endif;






if (sysCallNo == 12) then 	//sysCallNo 12 --> GETPPID
	alias PCB S2;
	PCB = READY_LIST + (32 * ((PTBR - 1024)/8));

	[physicalSP - 2] = [PCB + 31];	//PCB modified to hold PPID in its last location
	ireturn;

	[physicalSP -2] = -1;	//in case of failure --> return -1  ..?
	ireturn;
endif;
