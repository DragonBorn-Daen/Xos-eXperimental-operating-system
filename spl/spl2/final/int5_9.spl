alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP/512)] * 512) + (SP % 512);	//REMEMBER this always

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias counter S2;

if (sysCallNo == 8) then	//sysCallNo 8 --> FORK
	alias freePCB S3;
	
	counter = 0;
	while (counter < 32) do					//search for a freePCB to allocate to child process
		if ([READY_LIST + (32 * counter) + 1] == 0) then
			freePCB = READY_LIST + (32 * counter);		//freePCB --> state=0

			[freePCB] = counter;		//setting the PID of the process to be the index in PCB
			
			alias validPages S4;
			counter = 0;
			validPages = 0;
			
			while (counter < 8) do				//count the number of validPages in the current process

				//a page is valid if, it is already brought into memory therefore it could be referenced or unreferenced valid bit must be set
				if ([PTBR + counter + 1] == "01" || [PTBR + counter + 1] == "11") then
					validPages = validPages + 1;
				endif;
				
				counter = counter + 2;
			endwhile;
			
			alias flag S5;
			alias checkPage S6;
			flag = 0;
			checkPage = 0;
			counter = 0;
			
			while (counter < 64) do		
				if ([MEM_LIST + counter] == 0) then		//see if enough free pages are available in memory free 														  list to replicate the process
					checkPage = checkPage + 1;
				endif;
				
				if (validPages == checkPage) then
					flag = 1;
					break;
				endif;
				
				counter = counter + 1;
			endwhile;
			
			if (flag == 0) then 	//indicates that not enough free pages were found --> failure
				[physicalSP - 2] = -1;
				ireturn;
			endif;
			
			
			
			alias childPTBR S7;
			childPTBR = (1024 + 8*[freePCB]);	//compute PTBR to copy all the parent's page table contents
			

			alias search S8;
			alias parentPage S9;
			alias childPage S10;
			alias copy S11;
			counter = 0;
			
			while (counter < 8) do
				search = 0;
				 
				if ([PTBR + counter + 1] == "01" || [PTBR + counter + 1] == "11") then	//--> must search for a free page in memory
					 
					while (search < 64) do
						if ([MEM_LIST + search] == 0) then	//find a free page
							[MEM_LIST + search] = 1;		//allocate the page
					   		
					   		[childPTBR + counter] = search;			//fill the childPTBR's page number
					   		[childPTBR + counter + 1] = "01";
					   		
					   		parentPage = [PTBR + counter] * 512;
					   		childPage = search * 512;

					   		copy = 0;					
					   		while (copy < 512) do			//copy the parent's entire page to the newly 															   	  allocated page
					   			
					   			[childPage + copy] = [parentPage + copy];

					   			
								copy = copy + 1;
							endwhile;	

							break;			//IMPORTANT --> break after allocating 1 page and copying to it
						endif;	
				
						search = search + 1;
					endwhile;
				
				else
					[childPTBR + counter] = -1;
					[childPTBR + counter + 1] = "00";

				endif;
				

				counter = counter + 2;
			endwhile;



			[freePCB + 6] = PTLR;			//PTLR same for both processes
			[freePCB + 5] = childPTBR;		//must fill in the PCB now, put in PTBR
			[freePCB + 4] = [physicalSP];	//IP on top of stack is logical --> execution of child should 									  start from the same place as parent, store logical IP in PCB
			[freePCB + 3] = SP - 1;			//SP-1 because it has been temporarily increased to store IP+2
			[freePCB + 2] = BP;				//Store machine registers directly, DON'T copy from parentPCB
			[freePCB + 7] = R0;				//...registers may have been saved some time ago in parent's PCB
			[freePCB + 8] = R1;				//...and will not reflect current register values, child should
			[freePCB + 9] = R2;				//...get register values of parent at the time FORK() is called
			[freePCB + 10] = R3;			//...so copy them DIRECTLY
			[freePCB + 11] = R4;			//...
			[freePCB + 12] = R5;
			[freePCB + 13] = R6;
			[freePCB + 14] = R7;			//...
			
			[freePCB + 31] = (PTBR - 1024)/8;	//use 31st word to store parent's pid

			alias SWOFT S12;	
			alias PCB S13;
			PCB = READY_LIST + (32 * ((PTBR-1024)/8));	//Must also copy PPOFT from parent to child
			counter = 0;
			
			while (counter < 16) do
				[freePCB + 15 + counter + 0] = [PCB + 15 + counter + 0];
				[freePCB + 15 + counter + 1] = [PCB + 15 + counter + 1];
				
				if ([PCB + 15 + counter + 0] != -1) then		//if valid file must increase File Open Count in SWOFT
					SWOFT = [PCB + 15 + counter + 0];
					[SWOFT + 1] = [SWOFT + 1] + 1;

				endif;
								
				counter = counter + 2;
			endwhile;
			
			[freePCB + 1] = 1;		//put the child process in a ready state (1)
			
			[physicalSP - 2] = [freePCB];	//return value to the parent process is the PID of the child
			
			alias childSP S14;
			childSP = [childPTBR + 2 * ((SP-1)/512)] * 512 + ((SP-1) % 512);	//calculate child's 																			physicalSP to put the return 																	 value 
			
			[childSP - 1] = -2;		//return value to the child process is -2 if successful
			
			ireturn;
			
		endif;	
		
		counter = counter + 1;
	endwhile;	

	[physicalSP - 2] = -1;	//no freePCB is available --> failure
	ireturn;
	
endif;
