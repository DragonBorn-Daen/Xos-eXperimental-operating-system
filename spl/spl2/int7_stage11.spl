alias physicalsp S0;
alias syscallno S1;
alias i S2;
alias j S3;
alias pid S4;
alias sysindex S5;
alias next S6;
alias nextpcb S7;
alias mempage S8;
alias valid S9;
alias waitingpid S10;
alias flag S11;


flag=0;
physicalsp=([PTBR+2*(SP/512)]*512)+SP%512;
syscallno=[physicalsp-1];


if syscallno==10 then

	pid=(PTBR-1024)/8;
	i=0;
	while i<32 do
		if [READY_LIST+32*i+1]==100+pid then
			[READY_LIST+32*i+1]=1;
		endif;
	i=i+1;
	endwhile;

	i=0;
	while i<32 do
		
		if [READY_LIST+32*i+1]==1 then
			break;
		endif;
	
	i=i+1;
	endwhile;

	if i==32 then
		halt;
	endif;

	i=0;
	while i<8 do
		sysindex=[READY_LIST+pid*32+15+2*i];
		if sysindex!=-1 then
			[READY_LIST+pid*32+15+2*i]=-1;
			[READY_LIST+pid*32+16+2*i]=0;
			[FILE_TABLE+2*sysindex+1]=[FILE_TABLE+2*sysindex+1]-1;
			if [FILE_TABLE+2*sysindex+1]==0 then
    				[FILE_TABLE+2*sysindex]=-1;
			endif;
		endif;
	i=i+1;
	endwhile;

	[READY_LIST+32*pid+1]=0;
	
	i=0;
	while i<4 do
		if [PTBR+2*i]!=-1 then
			mempage=[PTBR+2*i];
			valid=[PTBR+2*i+1];
			if valid=="01" || valid=="11" then
				[MEM_LIST+mempage]=[MEM_LIST+mempage]-1;
			endif;
			if valid=="00" && mempage>=448 then
				[DISK_LIST+mempage]=[DISK_LIST+mempage]-1;
				store(6,20);
			endif;
		endif;
		[PTBR+2*i]=-1;
		[PTBR+2*i+1]="00";
	i=i+1;
	endwhile;

	flag=1;


endif;


if syscallno==13 then
	
	waitingpid=[physicalsp-3];
   	pid=(PTBR-1024)/8;
   	if waitingpid==pid || [READY_LIST+waitingpid*32+1]==0 then
     		[physicalsp-2]=-1;
     		ireturn;
   	endif;
   	[physicalsp-2]=0;
   	[READY_LIST+pid*32+1]=100+waitingpid;
	[READY_LIST+pid*32+2]=BP;
   	[READY_LIST+pid*32+3]=SP;
   	[READY_LIST+pid*32+4]=[physicalsp];
	[READY_LIST+pid*32+5]=PTBR;
	[READY_LIST+pid*32+6]=PTLR;
	[READY_LIST+pid*32+7]=R0;
	[READY_LIST+pid*32+8]=R1;
	[READY_LIST+pid*32+9]=R2;
	[READY_LIST+pid*32+10]=R3;
	[READY_LIST+pid*32+11]=R4;
	[READY_LIST+pid*32+12]=R5;	
	[READY_LIST+pid*32+13]=R6;
	[READY_LIST+pid*32+14]=R7;
	
  	flag=1;
	
	
endif;


if syscallno==14 then

	waitingpid=[physicalsp-3];
	i=0;
	while i<32 do
		if [READY_LIST+32*i+1]==100+pid then
			[READY_LIST+32*i+1]=1;
		endif;
	i=i+1;
	endwhile;
	[physicalsp-2]=1;
	ireturn;

endif;


if flag==1 then 

	pid=(PTBR-1024)/8;
	i=pid+1;
	while i!=pid do
		if i==32 then
			i=0;
		endif;
		
		if [READY_LIST+32*i+1]==1 then
			next=i;
			break;
		endif;
	
	i=i+1;
	endwhile;

	nextpcb=READY_LIST+32*next;
	[nextpcb+0]=next;
	[nextpcb+1]=2;
	BP=[nextpcb+2];
	SP=[nextpcb+3];
	PTBR=[nextpcb+5];
	PTLR=[nextpcb+6];
	R0=[nextpcb+7];
	R1=[nextpcb+8];
	R2=[nextpcb+9];
	R3=[nextpcb+10];
	R4=[nextpcb+11];
	R5=[nextpcb+12];
	R6=[nextpcb+13];
	R7=[nextpcb+14];

	SP=SP+1;
	[([PTBR+2*(SP/512)]*512)+(SP%512)]=[nextpcb+4];
	ireturn ;


endif;
